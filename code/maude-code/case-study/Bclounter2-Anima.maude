--- File: syntax.maude

--- Definition of the different entities to model reactions and processes
--- Reactions are terms of the form   [ R ; I ; P ] 
--- Process have the following syntax 
---   P ::= 0  |  X |  C . P  |  P + P  |  rec X . P | P || P
--- Qids are used as identifiers for recursive process

--- the operator  op reactions : -> NeSetReaction [ctor memo] 
--- must be defined (using equations) by the user's module 
--- (see the examples in the directory case-study)

--- Sort for entities to be later populated with used-defined constants
fmod BASE is
 sort Entity . 
endfm

view Entity from TRIV to BASE is 
  sort Elt to Entity .
endv

--- Reactions [ R ; I ; P ]  
fmod REACTION is
  pr SET{Entity} * (sort Set{Entity} to SetEntity, sort NeSet{Entity} to NeSetEntity) .

  sort Reaction .

  op `[_;_;_`] : SetEntity SetEntity SetEntity -> Reaction [ctor] .
endfm

--- Processes 
fmod Process is
  pr REACTION .
  pr QID . --- for variables in recursive definitions 

  sort Condition .
  sorts Process PreProcess SumProcess .
  subsort Qid < Process .  
  subsort PreProcess < SumProcess < Process . --- For unary summations 

  --- Conditions can be entities or their absence 
  subsort Entity < Condition .
  op _^ : Entity -> Condition [ctor] .
  op tt : -> Condition [ctor] .
  op _and_ : Condition Condition -> Condition [ctor gather (e E)] .
  op _or_ : Condition Condition -> Condition [ctor gather (e E)] .

  --- Processes with prefixes 
  op {_}._  : SetEntity Process -> PreProcess [ctor gather (e E) prec 20] .
  op `[ _-->{_} `] . _  : Condition SetEntity Process -> PreProcess [ctor] .

  op 0      :                       -> Process [ctor] . --- inaction
  op _+_    : PreProcess SumProcess -> SumProcess [ctor gather (e E)  prec 80] .
  op _||_   : Process Process       -> Process [ctor assoc comm prec 90] .
  op rec_._ : Qid Process           -> Process [ctor] .

  --- Replication (derived operator)
  op !_     : SetEntity -> Process .
  eq ! W = rec 'REP . ( { W } . 'REP) .


  --- -----------------------
  vars X Y   : Qid .
  vars P Q R : Process .
  vars S W   : SetEntity .
  var COND   : Condition .
  --- -----------------------

  --- Identity by equations (for efficiency in the definition of the semantics)
  eq P || 0 = P .

  --- Substitution for defining recursion
  op subst : Qid Process Process -> Process .

  eq subst(X, R, { S } . P) = { S } . subst(X, R, P) .
  eq subst(X, R, [ COND --> { S } ] . P) = [ COND --> { S }] . subst(X, R, P) .
  eq subst(X, R, 0) = 0 .
  eq subst(X, R, P + Q ) = subst(X, R, P) + subst(X, R, Q) .
  eq subst(X, R, P || Q ) = subst(X, R, P) ||  subst(X, R, Q) .
  ceq subst(X, R, rec Y . P) = rec Y . subst(X, R, P) if X =/= Y .
  ceq subst(X, R, rec Y . P) = rec Y . P if X == Y .
  eq subst(X, R, X) = R .
  ceq subst(X, R, Y) = Y if X =/= Y .

endfm

view Reaction from TRIV to REACTION is 
  sort Elt to Reaction .
endv

--- A Reaction System
--- The user-defined module must provide equations for the operator "reactions" 
fmod RS is
  pr Process .
  pr SET{Reaction} * (sort Set{Reaction} to SetReaction, sort NeSet{Reaction} to NeSetReaction) .

  --- To be defined by the user
  op reactions : -> NeSetReaction [ctor memo] .
endfm

***(

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2024 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

)

***
***	Maude LTL satisfiability solver and model checker.
***	Version 3.4.
***

fmod LTL is
  protecting BOOL .
  sort Formula .

  *** primitive LTL operators
  ops True False : -> Formula [ctor format (g o)] .
  op ~_ : Formula -> Formula [ctor prec 53 format (r o d)] .
  op _/\_ : Formula Formula -> Formula [comm ctor gather (E e) prec 55 format (d r o d)] .
  op _\/_ : Formula Formula -> Formula [comm ctor gather (E e) prec 59 format (d r o d)] .
  op O_ : Formula -> Formula [ctor prec 53 format (r o d)] .
  op _U_ : Formula Formula -> Formula [ctor prec 63 format (d r o d)] .
  op _R_ : Formula Formula -> Formula [ctor prec 63 format (d r o d)] .

  *** defined LTL operators
  op _->_ : Formula Formula -> Formula [gather (e E) prec 65 format (d r o d)] .
  op _<->_ : Formula Formula -> Formula [prec 65 format (d r o d)] .
  op <>_ : Formula -> Formula [prec 53 format (r o d)] .
  op []_ : Formula -> Formula [prec 53 format (r d o d)] .
  op _W_ : Formula Formula -> Formula [prec 63 format (d r o d)] .
  op _|->_ : Formula Formula -> Formula [prec 63 format (d r o d)] . *** leads-to
  op _=>_ : Formula Formula -> Formula [gather (e E) prec 65 format (d r o d)] .
  op _<=>_ : Formula Formula -> Formula [prec 65 format (d r o d)] .

  vars f g : Formula .

  eq f -> g = ~ f \/ g .
  eq f <-> g = (f -> g) /\ (g -> f) .
  eq <> f = True U f .
  eq [] f = False R f .
  eq f W g = (f U g) \/ [] f .
  eq f |-> g = [](f -> (<> g)) .
  eq f => g = [] (f -> g) .
  eq f <=> g = [] (f <-> g) .

  *** negative normal form
  eq ~ True = False .
  eq ~ False = True .
  eq ~ ~ f = f .
  eq ~ (f \/ g) = ~ f /\ ~ g .
  eq ~ (f /\ g) = ~ f \/ ~ g .
  eq ~ O f = O ~ f .
  eq ~(f U g) = (~ f) R (~ g) .
  eq ~(f R g) = (~ f) U (~ g) .
endfm

fmod LTL-SIMPLIFIER is
  including LTL .

  *** The simplifier is based on:
  ***   Kousha Etessami and Gerard J. Holzman,
  ***   "Optimizing Buchi Automata", p153-167, CONCUR 2000, LNCS 1877.
  *** We use the Maude sort system to do much of the work.

  sorts TrueFormula FalseFormula PureFormula PE-Formula PU-Formula .
  subsort TrueFormula FalseFormula < PureFormula <
	  PE-Formula PU-Formula < Formula .

  op True : -> TrueFormula [ctor ditto] .
  op False : -> FalseFormula [ctor ditto] .
  op _/\_ : PE-Formula PE-Formula -> PE-Formula [ctor ditto] .
  op _/\_ : PU-Formula PU-Formula -> PU-Formula [ctor ditto] .
  op _/\_ : PureFormula PureFormula -> PureFormula [ctor ditto] .
  op _\/_ : PE-Formula PE-Formula -> PE-Formula [ctor ditto] .
  op _\/_ : PU-Formula PU-Formula -> PU-Formula [ctor ditto] .
  op _\/_ : PureFormula PureFormula -> PureFormula [ctor ditto] .
  op O_ : PE-Formula -> PE-Formula [ctor ditto] .
  op O_ : PU-Formula -> PU-Formula [ctor ditto] .
  op O_ : PureFormula -> PureFormula [ctor ditto] .
  op _U_ : PE-Formula PE-Formula -> PE-Formula [ctor ditto] .
  op _U_ : PU-Formula PU-Formula -> PU-Formula [ctor ditto] .
  op _U_ : PureFormula PureFormula -> PureFormula [ctor ditto] .
  op _U_ : TrueFormula Formula -> PE-Formula [ctor ditto] .
  op _U_ : TrueFormula PU-Formula -> PureFormula [ctor ditto] .
  op _R_ : PE-Formula PE-Formula -> PE-Formula [ctor ditto] .
  op _R_ : PU-Formula PU-Formula -> PU-Formula [ctor ditto] .
  op _R_ : PureFormula PureFormula -> PureFormula [ctor ditto] .
  op _R_ : FalseFormula Formula -> PU-Formula [ctor ditto] .
  op _R_ : FalseFormula PE-Formula -> PureFormula [ctor ditto] .

  vars p q r s : Formula .
  var pe : PE-Formula .
  var pu : PU-Formula .
  var pr : PureFormula .

  *** Rules 1, 2 and 3; each with its dual.
  eq (p U r) /\ (q U r) = (p /\ q) U r .
  eq (p R r) \/ (q R r) = (p \/ q) R r .
  eq (p U q) \/ (p U r) = p U (q \/ r) .
  eq (p R q) /\ (p R r) = p R (q /\ r) .
  eq True U (p U q) = True U q .
  eq False R (p R q) = False R q .

  *** Rules 4 and 5 do most of the work.
  eq p U pe = pe .
  eq p R pu = pu .

  *** An extra rule in the same style.
  eq O pr = pr .

  *** We also use the rules from:
  ***   Fabio Somenzi and Roderick Bloem,
  ***	"Efficient Buchi Automata from LTL Formulae",
  ***   p247-263, CAV 2000, LNCS 1633.
  *** that are not subsumed by the previous system.

  *** Four pairs of duals.
  eq O p /\ O q = O (p /\ q) .
  eq O p \/ O q = O (p \/ q) .
  eq O p U O q = O (p U q) .
  eq O p R O q = O (p R q) .
  eq True U O p = O (True U p) .
  eq False R O p = O (False R p) .
  eq (False R (True U p)) \/ (False R (True U q)) = False R (True U (p \/ q)) .
  eq (True U (False R p)) /\ (True U (False R q)) = True U (False R (p /\ q)) .

  *** <= relation on formula
  op _<=_ : Formula Formula -> Bool [prec 75] .

  eq p <= p = true .
  eq False <= p  = true .
  eq p <= True = true .

  ceq p <= (q /\ r) = true if (p <= q) /\ (p <= r) .
  ceq p <= (q \/ r) = true if p <= q .
  ceq (p /\ q) <= r = true if p <= r .
  ceq (p \/ q) <= r = true if (p <= r) /\ (q <= r) .

  ceq p <= (q U r) = true if p <= r .
  ceq (p R q) <= r = true if q <= r .
  ceq (p U q) <= r = true if (p <= r) /\ (q <= r) .
  ceq p <= (q R r) = true if (p <= q) /\ (p <= r) .
  ceq (p U q) <= (r U s) = true if (p <= r) /\ (q <= s) .
  ceq (p R q) <= (r R s) = true if (p <= r) /\ (q <= s) .

  *** condition rules depending on <= relation
  ceq p /\ q = p if p <= q .
  ceq p \/ q = q if p <= q .
  ceq p /\ q = False if p <= ~ q .
  ceq p \/ q = True if ~ p <= q .
  ceq p U q = q if p <= q .
  ceq p R q = q if q <= p .
  ceq p U q = True U q if p =/= True /\ ~ q <= p .
  ceq p R q = False R q if p =/= False /\ q <= ~ p .
  ceq p U (q U r) = q U r if p <= q .
  ceq p R (q R r) = q R r if q <= p .
endfm

fmod SAT-SOLVER is
  protecting LTL .

  *** formula lists and results
  sorts FormulaList SatSolveResult TautCheckResult .
  subsort Formula < FormulaList .
  subsort Bool < SatSolveResult TautCheckResult .
  op nil : -> FormulaList [ctor] .
  op _;_ : FormulaList FormulaList -> FormulaList [ctor assoc id: nil] .
  op model : FormulaList FormulaList -> SatSolveResult [ctor] .

  op satSolve : Formula ~> SatSolveResult
	[special (
	   id-hook SatSolverSymbol
	   op-hook trueSymbol           (True : ~> Formula)
	   op-hook falseSymbol		(False : ~> Formula)
	   op-hook notSymbol		(~_ : Formula ~> Formula)
	   op-hook nextSymbol		(O_ : Formula ~> Formula)
	   op-hook andSymbol		(_/\_ : Formula Formula ~> Formula)
	   op-hook orSymbol		(_\/_ : Formula Formula ~> Formula)
	   op-hook untilSymbol		(_U_ : Formula Formula ~> Formula)
	   op-hook releaseSymbol	(_R_ : Formula Formula ~> Formula)
	   op-hook formulaListSymbol
		   (_;_ : FormulaList FormulaList ~> FormulaList)
	   op-hook nilFormulaListSymbol	(nil : ~> FormulaList)
	   op-hook modelSymbol
		   (model : FormulaList FormulaList ~> SatSolveResult)
	   term-hook falseTerm		(false)
	 )] .

  op counterexample : FormulaList FormulaList -> TautCheckResult [ctor] .
  op tautCheck : Formula ~> TautCheckResult .
  op $invert : SatSolveResult -> TautCheckResult .

  var F : Formula .
  vars L C : FormulaList .
  eq tautCheck(F) = $invert(satSolve(~ F)) .
  eq $invert(false) = true .
  eq $invert(model(L, C)) = counterexample(L, C) .
endfm

fmod SATISFACTION is
  protecting BOOL .
  sorts State Prop .
  op _|=_ : State Prop ~> Bool [frozen] .
endfm

fmod MODEL-CHECKER is
  protecting QID .
  including SATISFACTION .
  including LTL .
  subsort Prop < Formula .

  *** transitions and results
  sorts RuleName Transition TransitionList ModelCheckResult .
  subsort Qid < RuleName .
  subsort Transition < TransitionList .
  subsort Bool < ModelCheckResult .
  ops unlabeled deadlock : -> RuleName .
  op {_,_} : State RuleName -> Transition [ctor] .
  op nil : -> TransitionList [ctor] .
  op __ : TransitionList TransitionList -> TransitionList [ctor assoc id: nil] .
  op counterexample : TransitionList TransitionList -> ModelCheckResult [ctor] .

  op modelCheck : State Formula ~> ModelCheckResult
	[special (
	   id-hook ModelCheckerSymbol
	   op-hook trueSymbol           (True : ~> Formula)
	   op-hook falseSymbol		(False : ~> Formula)
	   op-hook notSymbol		(~_ : Formula ~> Formula)
	   op-hook nextSymbol		(O_ : Formula ~> Formula)
	   op-hook andSymbol		(_/\_ : Formula Formula ~> Formula)
	   op-hook orSymbol		(_\/_ : Formula Formula ~> Formula)
	   op-hook untilSymbol		(_U_ : Formula Formula ~> Formula)
	   op-hook releaseSymbol	(_R_ : Formula Formula ~> Formula)
           op-hook satisfiesSymbol      (_|=_ : State Formula ~> Bool)
	   op-hook qidSymbol		(<Qids> : ~> Qid)
	   op-hook unlabeledSymbol	(unlabeled : ~> RuleName)
	   op-hook deadlockSymbol	(deadlock : ~> RuleName)
	   op-hook transitionSymbol	({_,_} : State RuleName ~> Transition)
	   op-hook transitionListSymbol
		   (__ : TransitionList TransitionList ~> TransitionList)
	   op-hook nilTransitionListSymbol	(nil : ~> TransitionList)
	   op-hook counterexampleSymbol
		   (counterexample : TransitionList TransitionList ~> ModelCheckResult)
	   term-hook trueTerm		(true)
	 )] .
endfm


--- Evaluating a reaction against a set of entities (the input)
fmod EVAL is
  pr RS .

  --- ---------------------------
  var INPUT        : SetEntity .
  vars C D         : SetEntity .
  vars R I P       : SetEntity .
  var SetR         : SetReaction .
  vars COND1 COND2 : Condition .
  var ENT          : Entity .
  --- ---------------------------

  --- Returns P if [R ; I : P] can be fired on input C and empty otherwise
  op $eval : SetEntity Reaction -> SetEntity .
  eq $eval(C, [R ; I ; P]) =
     if (R subset C) and-then intersection(C, I) == empty
     then P
     else empty
     fi .

  --- Evaluating a set of reactions
  op eval : SetEntity SetReaction -> SetEntity .
  op eval : SetEntity SetReaction SetEntity -> SetEntity .

  eq eval(C, SetR) = eval(C, SetR, empty) .
  eq eval(C, empty, D) = D .
  eq eval(C, ([R ; I ; P], SetR), D) = eval(C, SetR, (D, $eval(C, [R ; I ; P]))) .

  --- Evaluating conditions
  op eval : Condition SetEntity -> Bool .
  eq eval(tt, INPUT) = true .
  eq eval(COND1 and COND2, INPUT) = eval(COND1, INPUT) and-then eval(COND2, INPUT) .
  eq eval(COND1 or COND2, INPUT) = eval(COND1, INPUT) or-else eval(COND2, INPUT) .
  eq eval(ENT, INPUT) = ENT in INPUT .
  eq eval(ENT ^ , INPUT) = not(ENT in INPUT) .
endfm

--- States of the systems
fmod STATE is
  including SATISFACTION .
  protecting MODEL-CHECKER .
  protecting  EVAL .
 
  sorts PState IOState .
  subsort PState IOState < State .
 
 
  --- Intermediate state where the process is not necessarily a prefix
  op { process:_ ; input:_ }  : Process SetEntity -> PState [ctor] .
  --- The input/output state and the process to be executed next 
  op { next:_ ; input:_ ; output:_ ; ctx:_  } : Process SetEntity SetEntity SetEntity -> IOState [ctor] .
 
  --- ------------------------
  var K           : Process .
  vars IN OUT CTX : SetEntity .
  var SETE        : SetEntity .
  --- ------------------------
 
  --- Properties are evaluated on IOStates (and are false on PStates)
  subsort SetEntity < Prop .
  eq STATE:PState |= SETE = false .
  eq { next: K ; input: IN ; output: OUT ; ctx: CTX } |= SETE = SETE subset OUT .

  --- This proposition is true on IOState 
  op io-state : -> Prop [ctor] .
  eq STATE:PState  |= io-state  = false .
  eq STATE:IOState |= io-state  = true .

  --- Steady state (checking whether the next state is the same as the current one)
  op isSteady : -> Prop [ctor] .
  eq { next: K ; input: IN ; output: OUT ; ctx: CTX } |= isSteady = IN == OUT .
  eq S:State |= isSteady = false [owise] .


endfm


mod SEMANTICS is
  pr STATE .

  --- ----------------------------
  vars K K'        : Process     .
  vars K1 K2       : Process     .
  vars K1' K2'     : Process     .
  var KS           : SumProcess  .
  vars Kp Kp'      : PreProcess  .
  vars C C' IN OUT : SetEntity   .
  vars IN' OUT'    : SetEntity   .
  vars OUT1 OUT2   : SetEntity   .
  var CTX          : SetEntity   .
  var CTX1 CTX2    : SetEntity   .
  var X            : Qid         .
  var COND         : Condition   .
  --- ----------------------------

  --- Checking if a prefix is enabled or not
  op firable : SetEntity SumProcess -> Bool .
  eq firable(IN, { C } . K) = true .
  eq firable(IN, [ COND --> { C } ] . K) = eval(COND, IN) .
  eq firable(IN, Kp + KS) = firable(IN, Kp) or-else firable(IN, KS) .


  --- Next iteration 

  --- With prefixes, the output is produced
  rl [output] : { process: ( { C } . K)  ; input: IN } =>
                { next:              K   ; input: IN ; output: eval( (C, IN), reactions) ; ctx: C } .

  rl [output_C] : { process: ( [ COND --> { C } ] . K)  ; input: IN } =>
                if eval(COND, IN) 
                then { next: K  ; input: IN ; output: eval( (C, IN), reactions) ; ctx: C } 
                else { next: 0  ; input: IN ; output: eval(      IN, reactions) ; ctx: empty } 
                fi .

  crl [choice_h] : { process:  Kp + KS ; input: IN } =>
                 { process:  Kp      ; input: IN } 
      if firable(IN, Kp) .

  crl [choice_t] : { process:  Kp + KS ; input: IN } =>
                 { process:  KS      ; input: IN } 
      if firable(IN, KS) .

 
  crl [parallel] : { process: K1 || K2 ; input: IN } =>
                   { next: K1' || K2'  ; input: IN ; output: (OUT1, OUT2) ; ctx: (CTX1, CTX2) } 
    if { process: K1 ; input: IN } => { next: K1' ; input: IN ; output: OUT1 ; ctx: CTX1} /\
       { process: K2 ; input: IN } => { next: K2' ; input: IN ; output: OUT2 ; ctx: CTX2} .

  rl [rec] :    { process: (rec X . K)              ; input: IN } =>
                { process: subst(X, (rec X . K), K) ; input: IN } .
endm

mod SEMANTICS2 is
  pr SEMANTICS . 

  --- ----------------------------
  vars K K'        : Process     .
  vars IN OUT      : SetEntity   .
  vars IN' OUT'    : SetEntity   .
  vars CTX CTX'    : SetEntity   .
  --- ----------------------------

  op {{ next:_ ; input:_ ; output:_ ; ctx:_  }} : Process SetEntity SetEntity SetEntity -> IOState [ctor frozen] .

  crl [step] :  {{ next: K ; input: IN ; output: OUT ; ctx: CTX }} =>
                {{ next: K' ; input: IN' ; output: OUT' ; ctx: CTX' }} 
                if
                  { process: K ; input: OUT } =>
                  { next: K' ; input: IN' ; output: OUT' ; ctx: CTX' } 
                  .
endm

mod MySystem is
 inc SEMANTICS2 .


 --- ----------------------
 --- Size of the bit counter
 --- ----------------------
 op N : -> Nat .
 eq N = 2 .
 --- ---------------------

 ops inc dec : -> Entity [ctor] .
 op p : Nat -> Entity [ctor] .


 --- -------------------------
 vars n m      : Nat .
 var P         : Process   .
 vars IN OUT C : SetEntity .
 --- -------------------------
 
 --- Reaction rules 
 op retention : -> SetReaction .
 op $retention : Nat -> SetReaction .
 eq retention = $retention(0) .
 eq $retention(n) = if n == N then empty 
                    else [ p(n) ; (inc, dec) ; p(n) ] , $retention(s(n)) 
                  fi .

 op increment : -> SetReaction .
 op $increment : NzNat -> SetReaction .
 eq increment =  [ inc ; (dec, p(0)) ; p(0) ] , $increment(1). 
 eq $increment(n) = if n == N then empty
                     else [ (inc, ps(sd(n,1))) ; (dec, p(n)) ; p(n) ] , $increment(s(n))
                    fi .

 --- Genering p(0)...p(n)
 op ps : Nat -> SetEntity .
 eq ps(0) = p(0) .
 eq ps(s(m)) = p(s(m)), ps(m) .


 op incSR : -> SetReaction .
 op $incSR : NzNat -> SetReaction .
 op $incSR : NzNat NzNat -> SetReaction .

 eq incSR = $incSR(0) .
 eq $incSR(n) = if n == N then empty 
               else $incSR(n, n + 1), $incSR(n + 1)
              fi .

 eq $incSR(n, m) = if m == N then empty
                  else [ (inc, p(m)) ; (dec, p(n)) ; p(m) ], $incSR(n, m + 1)
                 fi .

 op decrement : -> SetReaction .
 op $decrement : NzNat -> SetReaction .
 eq decrement =  $decrement(0). 
 eq $decrement(n) = if n == N then empty
                     else [ dec ; (inc, ps(n)) ; p(n)] , $decrement(s(n))
                    fi .

 op decSR : -> SetReaction .
 op $decSR : NzNat -> SetReaction .
 op $decSR : NzNat NzNat -> SetReaction .

 eq decSR = $decSR(0) .
 eq $decSR(n) = if n == N then empty 
               else $decSR(n, n + 1), $decSR(n + 1)
              fi .

 eq $decSR(n, m) = if m == N then empty
                  else [ (dec, p(m), p(n)) ; inc ; p(m) ], $decSR(n, m + 1)
                 fi .


 eq reactions = retention, increment, incSR, decrement, decSR .
    
 op proc : -> Process .
 eq proc =   rec 'X . ( {inc} . 'X ) .


 op init : -> IOState .
 eq init = {{ next: proc  ; input: empty ; output: empty ; ctx: empty }} .


endm
