
load semantics .
mod MySystem is
 inc SEMANTICS .
 ops akt bax cjun craf cyclinb1 cyclind1 cyclinD1 erbb1 erbb2 erbb3 erlotinib
     fox01-3a gsk3a-b gska-b nfkb p38 p53 p70s6k pertuzumab pras pten rb rps6 stimulus
     trastuzumab tsc2 mtor pdk1 e t p egf plcg hrg erk12 mek12 pkca  : -> Entity [ctor] .

  eq reactions = 
  [ (akt) ; ( empty ) ; (akt) ] ,
  [ (erbb3) ; ( empty ) ; (akt) ] ,
  [ (mtor) ; ( empty ) ; (akt) ] ,
  [ (pdk1) ; ( empty ) ; (akt) ] ,
  [ (erbb1) ; (e,p) ; (erbb1) ] ,
  [ (egf) ; (e ,p) ; (erbb1) ] ,
  [ (plcg) ; (e ,p) ; (erbb1) ] ,
  [ (erbb2) ; (e ,t ,p) ; (erbb2) ] ,
  [ (egf) ; (e, t ,p) ; (erbb2) ] ,
  [ (erbb3) ; (e, t ,p) ; (erbb2) ] ,
  [ (erbb3) ; (e, p) ; (erbb3) ] ,
  [ (hrg) ; (e, p) ; (erbb3) ] ,
  [ (erk12) ; ( empty ) ; (erk12) ] ,
  [ (egf) ; ( empty ) ; (erk12) ] ,
  [ (p) ; ( empty ) ; (erk12) ] ,
  [ (mek12) ; ( empty ) ; (erk12) ] ,
  [ (mek12) ; ( empty ) ; (mek12) ] ,
  [ (erbb1) ; ( empty ) ; (mek12) ] ,
  [ (erbb2) ; ( empty ) ; (mek12) ] ,
  [ (erbb3) ; ( empty ) ; (mek12) ] ,
  [ (mtor) ; ( empty ) ; (mtor) ] ,
  [ (p) ; ( empty ) ; (mtor) ] ,
  [ (akt) ; ( empty ) ; (mtor) ] ,
  [ (p70s6k) ; ( empty ) ; (p70s6k) ] ,
  [ (akt) ; ( empty ) ; (p70s6k) ] ,
  [ (mtor) ; ( empty ) ; (p70s6k) ] ,
  [ (erk12) ; ( empty ) ; (p70s6k) ] ,
  [ (pdk1) ; ( empty ) ; (pdk1) ] ,
  [ (erbb1) ; ( empty ) ; (pdk1) ] ,
  [ (erbb2) ; ( empty ) ; (pdk1) ] ,
  [ (erbb3) ; ( empty ) ; (pdk1) ] ,
  [ (mek12) ; ( empty ) ; (pdk1) ] ,
  [ (pkca) ; ( empty ) ; (pkca) ] ,
  [ (plcg) ; ( empty ) ; (pkca) ] ,
  [ (plcg) ; ( empty ) ; (plcg) ] ,
  [ (egf) ; ( empty ) ; (plcg) ] ,
  [ (erbb1) ; ( empty ) ; (plcg) ] ,
  [ (erbb2) ; ( empty ) ; (plcg) ] ,
  [ (erbb3) ; ( empty ) ; (plcg) ] .

 op proc1 : -> Process .
 eq proc1 = rec 'X . ({ (hrg, egf) } . 'X) .

 --- An example of an initial state
 op init1 : -> State .
 eq init1 = { process: proc1  ; input: empty } .

 var P         : Process   .
 vars IN OUT C : SetEntity .

endm

eof 

search [1]  init1 =>* STATE:IOState such that STATE:IOState |= akt .

--- ***********
--- EXPERIMENTS
--- ***********
--- Always hrg and egf must be preset. Now we test some of the combinations of
--- the drugs 

--- 1. Without any drug (X in the table). 
--- 1.1 Search for AKT (Solution found)
search [1]  { process: rec 'X . ( { (hrg, egf) } . 'X )  ; input: empty }  =>* STATE:IOState such that STATE:IOState |= akt .
--- 1.2 Search for erk1-2 (Solution found)
search [1]  { process: rec 'X . ( { (hrg, egf) } . 'X )  ; input: empty }  =>* STATE:IOState such that STATE:IOState |= erk12 .
--- 1.3 Search for p70s6k (solution found)
search [1]  { process: rec 'X . ( { (hrg, egf) } . 'X )  ; input: empty }  =>* STATE:IOState such that STATE:IOState |= p70s6k .

--- The above properties but using CTL Model checking 
umaudemc check example-BT474 "{ process: rec 'X . ( { (hrg, egf) } . 'X )  ; input: empty }" "E <> akt"
umaudemc check example-BT474 "{ process: rec 'X . ( { (hrg, egf) } . 'X )  ; input: empty }" "E <> erk12"
umaudemc check example-BT474 "{ process: rec 'X . ( { (hrg, egf) } . 'X )  ; input: empty }" "E <> p70s6k"


--- The same but knowing that the state is steady
umaudemc check example-BT474 "{ process: rec 'X . ( { (hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 

--- -----------------------------
--- Steady state and using drugs 
--- -----------------------------

--- 1. Using E 
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 

--- 2. Using P 
umaudemc check example-BT474 "{ process: rec 'X . ( { (p, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (p, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (p, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 

--- 3. Using T 
umaudemc check example-BT474 "{ process: rec 'X . ( { (t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 

--- 4. Using E and P
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, p, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, p, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, p, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 

--- 5. Using E and T
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 

--- 6. Using P and T
umaudemc check example-BT474 "{ process: rec 'X . ( { (p, t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (p, t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (p, t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 

--- 7. Using E, P and T
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, p, t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, p, t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( { (e, p, t, hrg, egf) } . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 

--- --------------------------------
--- Examples using mixtures of drugs
--- --------------------------------

--- 1. rec X. E . P . X
umaudemc check example-BT474 "{ process: rec 'X . ( {(e, hrg, egf)} . {(p, hrg, egf)} . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( {(e, hrg, egf)} . {(p, hrg, egf)} . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( {(e, hrg, egf)} . {(p, hrg, egf)} . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 

--- 2. rec X. P . E . X
umaudemc check example-BT474 "{ process: rec 'X . ( {(p, hrg, egf)} . {(e, hrg, egf)} . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( {(p, hrg, egf)} . {(e, hrg, egf)} . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( {(p, hrg, egf)} . {(e, hrg, egf)} . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 

--- 3. rec X. T . P . E . X
umaudemc check example-BT474 "{ process: rec 'X . ( {(t, hrg, egf)} . {(p, hrg, egf)} . {(e, hrg, egf)} . 'X )  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( {(t, hrg, egf)} . {(p, hrg, egf)} . {(e, hrg, egf)} . 'X )  ; input: empty }" "E <> (isSteady /\ erk12)" 
umaudemc check example-BT474 "{ process: rec 'X . ( {(t, hrg, egf)} . {(p, hrg, egf)} . {(e, hrg, egf)} . 'X )  ; input: empty }" "E <> (isSteady /\ p70s6k)" 


--- ---------------------
--- Other experiments
--- ---------------------

--- E seems to be not enough for producing AKT. This makes the difference between Existential and A-Universal paths. 
--- E phi is true but A phi is not (since the path e.e.e... does not satisfy the property)
umaudemc check example-BT474 "{ process: rec 'X . ( ({(e, hrg, egf)} . 'X) + ({(p, hrg, egf)} . 'X))  ; input: empty }" "E <> (isSteady /\ akt)" 
umaudemc check example-BT474 "{ process: rec 'X . ( ({(e, hrg, egf)} . 'X) + ({(p, hrg, egf)} . 'X))  ; input: empty }" "A <> (isSteady /\ akt)" 

--- erk12 is reachable and, in the middle, akt is present 
umaudemc check example-BT474 "{ process: rec 'X . ( { (t, hrg, egf) } . 'X )  ; input: empty }" "E ((A <> akt)  U (isSteady /\ erk12))" 

---
 umaudemc check example-BT474 "{ process: ({(p,hrg, egf)} . (rec 'X . ( { (p) } . 'X )))  ; input: empty }" "E <> (isSteady /\ akt)"
