'''
  This script generates a DOT file with the transition system of reaction
  system at hand import maude

  TODO: Write a minimal command line interface for the parameters
'''

import maude
import pydot
import re

STEPS = 200 # Number of steps for the search procedure
MAUDE_FILE = '../case-study/mutex-CTL.maude' # Maude file with the specification of the system
OUTPUT = 'out.dot' # Dot file to be generated

def escape_ansi(line):
    '''Escaping ANSI characters generated by the output of Maude'''

    ansi_escape = re.compile(r'(?:\x1B[@-_]|[\x80-\x9F])[0-?]*[ -/]*[@-~]')
    s =  ansi_escape.sub('', line)
    if s.find("empty") >= 0:
        s = "{}"
    return s

def getSolutions(steps, file, modulename="MySystem", initialterm="init"):
    '''
    Returns a stream with tuples (input, output, context)
    It generates upto "steps" solutions 
    file is the maude file with the specification of the system 
    modulename is the name of the Maude's module with the specification
    '''

    maude.init()
    maude.load(file)
    modsys = maude.getModule(modulename)
    tinit = modsys.parseTerm(initialterm)
    tpattern = modsys.parseTerm('{ next: P:Process  ; input: IN:SetEntity ; output:  OUT:SetEntity ; ctx: CTX:SetEntity }  ')


    searchresult = tinit.search(maude.ANY_STEPS, tpattern)
    nsol = 0
    for x in searchresult : 
        nsol += 1
        if nsol > steps:
            break

        tsol, _, _, _ = x
        _, tin, tout, tctx  = tuple(tsol.arguments())
        strin = escape_ansi(str(tin))
        strout = escape_ansi(str(tout))
        strctx = escape_ansi(str(tctx))
        yield strin, strout, strctx


if __name__ == "__main__":

    graph = pydot.Dot("system", graph_type="digraph", bgcolor="white")
    nodes = set()
    edges = set()

    for _in, _out, _ctx in getSolutions(STEPS, MAUDE_FILE):
        nodes.add(_in)
        nodes.add(_out)
        edges.add((_in, _ctx, _out))

    for n in nodes:
        graph.add_node(pydot.Node(n, shape="circle", color="cornflowerblue")) #, label=str(nlab)))

    for i,ctx,o in edges:
        graph.add_edge(pydot.Edge(i, o, color="0.051 0.718 0.627", label=ctx))

    graph.write_raw(OUTPUT)

