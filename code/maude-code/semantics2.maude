
--- Seminlar to semantics but the "next" rule is not conditional. Hence, a predicate is-state is needed

load syntax .
load model-checker .

--- Evaluating a reaction against a set of entities (the input)
fmod EVAL is
  pr RS .

  --- ---------------------------
  var INPUT        : SetEntity .
  vars C D         : SetEntity .
  vars R I P       : SetEntity .
  var SetR         : SetReaction .
  vars COND1 COND2 : Condition .
  var ENT          : Entity .
  --- ---------------------------

  --- Returns P if [R ; I : P] can be fired on input C and empty otherwise
  op $eval : SetEntity Reaction -> SetEntity .
  eq $eval(C, [R ; I ; P]) =
     if (R subset C) and-then intersection(C, I) == empty
     then P
     else empty
     fi .

  --- Evaluating a set of reactions
  op eval : SetEntity SetReaction -> SetEntity .
  op eval : SetEntity SetReaction SetEntity -> SetEntity .

  eq eval(C, SetR) = eval(C, SetR, empty) .
  eq eval(C, empty, D) = D .
  eq eval(C, ([R ; I ; P], SetR), D) = eval(C, SetR, (D, $eval(C, [R ; I ; P]))) .

  --- Evaluating conditions
  op eval : Condition SetEntity -> Bool .
  eq eval(tt, INPUT) = true .
  eq eval(COND1 and COND2, INPUT) = eval(COND1, INPUT) and-then eval(COND2, INPUT) .
  eq eval(COND1 or COND2, INPUT) = eval(COND1, INPUT) or-else eval(COND2, INPUT) .
  eq eval(ENT, INPUT) = ENT in INPUT .
  eq eval(ENT ^ , INPUT) = not(ENT in INPUT) .
endfm

--- States of the systems
fmod STATE is
  including SATISFACTION .
  protecting MODEL-CHECKER .
  protecting  EVAL .
 
  sorts PState IOState .
  subsort PState IOState < State .
 
 
  --- Intermediate state where the process is not necessarily a prefix
  op { proc:_ ; in:_ }  : Process SetEntity -> PState [ctor] .
  --- The end of an internal computation
  op { next:_ ; in:_ ;  ctx:_  } : Process SetEntity SetEntity -> IOState [ctor] .
  --- The result of the computation
  op { proc:_ ;  in:_ ; out:_ } : Process SetEntity SetEntity -> State [ctor] .
 
  --- ------------------------
  var K           : Process .
  vars IN OUT CTX : SetEntity .
  var SETE        : SetEntity .
  --- ------------------------
 
  --- Properties are evaluated on States (and are false on PStates and IOState)
  subsort SetEntity < Prop .
  eq STATE:PState  |= SETE = false .
  eq STATE:IOState |= SETE = false .
  eq { proc: K ; in: IN ;  out: OUT } |= SETE = SETE subset OUT .

  --- This proposition is true on States 
  op is-state : -> Prop [ctor] .
  eq STATE:PState  |= is-state  = false .
  eq STATE:IOState |= is-state  = false .
  eq STATE:State   |= is-state  = true [owise] .


  --- Steady state (checking whether the next state is the same as the current one)
  op isSteady : -> Prop [ctor] .
  eq { proc: K ; in: IN ;  out: OUT  } |= isSteady = IN == OUT .
  eq S:State |= isSteady = false [owise] .

  op init : Process -> State .
  eq init(K) = { proc: K ; in: empty ; out: empty } .


endfm


mod SEMANTICS is
  pr STATE .

  --- ----------------------------
  vars K K'        : Process     .
  vars K1 K2       : Process     .
  vars K1' K2'     : Process     .
  var KS           : SumProcess  .
  vars Kp Kp'      : PreProcess  .
  vars C C' IN OUT : SetEntity   .
  vars IN' OUT'    : SetEntity   .
  vars OUT1 OUT2   : SetEntity   .
  var CTX          : SetEntity   .
  var CTX1 CTX2    : SetEntity   .
  var X            : Qid         .
  var COND         : Condition   .
  --- ----------------------------

  --- Checking if a prefix is enabled or not
  op firable : SetEntity SumProcess -> Bool .
  eq firable(IN, { C } . K) = true .
  eq firable(IN, [ COND --> { C } ] . K) = eval(COND, IN) .
  eq firable(IN, Kp + KS) = firable(IN, Kp) or-else firable(IN, KS) .


  --- Next iteration 
  --- rl [output] :  { next: K ; in: IN ;  ctx: CTX } =>
               ---- { proc: K ; in: IN ; out: eval( (CTX, IN), reactions) } .

  --- rl [next] : { proc: K ; in: IN ; out: OUT } =>
              --- { proc: K ; in: OUT } .
   rl [next] : { next: K ; in: IN ; ctx: CTX } =>
                { proc: K ; in: IN ; out: eval( (IN, CTX), reactions) } . 

   rl [next] : { proc: K ; in: IN ; out: OUT } =>
                { proc: K ; in: OUT } .

              --- { proc: K ; in: OUT } .

  --- With prefixes, the output is produced
  rl [prefix] : { proc: ( { C } . K)  ; in: IN } =>
                { next: K   ; in: IN ;  ctx: C } .

  rl [prefixC] : { proc: ( [ COND --> { C } ] . K)  ; in: IN } =>
                if eval(COND, IN) 
                then { next: K  ; in: IN ; ctx: C } 
                else { next: 0  ; in: IN ; ctx: empty } 
                fi .

  crl [choice] : { proc:  Kp + KS ; in: IN } =>
                 { proc:  Kp      ; in: IN } 
      if firable(IN, Kp) or-else not firable(IN, KS) .

  crl [choice] : { proc:  Kp + KS ; in: IN } =>
                 { proc:  KS      ; in: IN } 
      if firable(IN, KS) .

 
  crl [parallel] : { proc: K1 || K2 ; in: IN } =>
                   { next: K1' || K2'  ; in: IN ; ctx: (CTX1, CTX2) } 
    if { proc: K1 ; in: IN } => { next: K1' ; in: IN ; ctx: CTX1} /\
       { proc: K2 ; in: IN } => { next: K2' ; in: IN ; ctx: CTX2} .

  rl [rec] :    { proc: (rec X . K)              ; in: IN } =>
                { proc: subst(X, (rec X . K), K) ; in: IN } .
endm
