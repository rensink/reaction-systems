Datamod case experiments
======================

# The following instructions are for Windows Powershell
# Define a Generator call with
function generator {
  java -Xmx12G -XX:SoftRefLRUPolicyMSPerMB=10 -jar \Path\To\Groove\bin\Generator.jar @args
}
# Define a ModelChecker call with
function modelchecker {
  java -Xmx12G -XX:SoftRefLRUPolicyMSPerMB=10 -cp \Path\To\Groove\bin\Generator.jar nl.utwente.groove.verify.CTLModelChecker @args
}

Producing the occurrence graph
------------------------------
# Producing the forbidden trace as control program
generator -P .\datamod.properties -D "ruleEnabling=+fired +datamod.gata3-tbet" -s 'ltl:!GF (present(\"gata3\") & present(\"tbet\"))' -traces -o gata3-tbet.gcp .\rs-explore.gps\

# For now: manually edit the generated control program gata3-tbet.gcp
# so it just contains the trace to the first state of the attractor and does not deadlock there

# Copy the control program to the build system
cp .\gata3-tbet.gcp .\rs-build.gps\

# Producing the occurrence graph
generator -P .\datamod-build.properties -D "controlProgram+=gata3-tbet" -f datamod-occur.gst .\rs-build.gps\

# Copy the occurrence graph to the prune system
cp .\datamod-occur.gst .\rs-prune.gps\

# Prune the occurrence graph
generator -P .\datamod-prune.properties -f datamod-pruned.gst .\rs-prune.gps\ .\datamod-occur.gst

# Layout and (for now) remove transitive dependencies between StepOccs
